---
- name: Determine if docker is installed
  stat:
    path: /usr/bin/docker
  register: _docker_binary
  ignore_errors: true

- name: Determine docker version
  command: "/usr/bin/docker --version"
  when: _docker_binary['stat']['exists']
  register: _docker_version
  changed_when: >
    'Docker version' not in _docker_version['stdout']
  ignore_errors: true

# - name: Determine if docker-compose is installed
#   shell: docker-compose version
#   register: _docker_compose_binary
#   ignore_errors: true

- name: Get pre-requisites for docker
  apt:
    name: "{{ docker_pre_requisites }}"
    state: present
    force: yes
    force_apt_get: yes
  when: not _docker_binary['stat']['exists']

- name: Add docker ({{ os_distro }}) repository key to apt
  shell: curl -fsSL https://download.docker.com/linux/{{ os_distro }}/gpg | apt-key add -
  when: not _docker_binary['stat']['exists']

- name: Add Docker ({{ os_distro }}) to available apt sources
  vars:
    # take care of armhf mapping in here for Raspberry Pi architectures.
    _node_arch: "{{ 'armhf' if (target_node_arch == 'arm') else target_node_arch }}"
    _node_os_distro: "{{ os_distro }}"
    # take care of os release/codename for raspbian; buster releases for docker doesn't exist yet >> fall back to 'stretch'
    _node_os_codename: "{{ 'stretch' if (os_codename == 'buster' and os_distro == 'raspbian') else os_codename }}"
  template:
    src: docker.list.j2
    dest: /etc/apt/sources.list.d/docker.list
    owner: root
    group: root
    mode: 0644
  when: not _docker_binary['stat']['exists']

- name: apt-get update
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    force_apt_get: yes
  when: not _docker_binary['stat']['exists']
  
- name: Install docker {{ docker_package_name }}
  apt:
    name: "{{ docker_package_name }}"
    state: present
    force_apt_get: yes
  become: true
  ignore_errors: true # check errors in subsequent tasks
  register: _docker_install_status
  when: not _docker_binary['stat']['exists']

- name: Check Install Error (Workaround for aufs-dkms post-processing error)
  debug:
    msg: "{{ ('Sub-process /usr/bin/dpkg returned an error code' in _docker_install_status['stderr'] and 'dpkg: error processing package aufs-dkms (--configure)' in _docker_install_status['stdout'])}}"
  register: _aufs_dkms_postprocess_error
  when: >
    _docker_install_status['stderr'] is defined
    and _docker_install_status['stderr'] != ""

- name: Fix failed aufs-dkms install (Workaround for aufs-dkms post-processing error)
  shell: >
    sudo rm /var/lib/dpkg/info/aufs-dkms.postinst; \
    sudo rm /var/lib/dpkg/info/aufs-dkms.prerm; \
    sudo dpkg --configure aufs-dkms; \
    sudo dpkg --configure docker-ce
  ignore_errors: true # this reconfiguration of docker-ce may provoke errors. But it's totally fine then...
  when: >
    _aufs_dkms_postprocess_error['msg'] is defined
    and _aufs_dkms_postprocess_error['msg'] == true

- name: Restart Docker daemon
  shell: systemctl restart docker
  when: not _docker_binary['stat']['exists']

- name: Add docker usergroup
  shell: usermod -aG docker {{ ansible_user }}
  when: not _docker_binary['stat']['exists']

# - name: Install docker-compose
#   pip:
#     name: docker-compose
#     state: latest
#   become: true
#   when: not ( _docker_compose_binary.stdout_lines | length > 0 )

- name: Reboot
  shell: sleep 5 && reboot
  async: 1
  poll: 0
  when: >
    not _docker_binary['stat']['exists']

- name: Wait for Reboot
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 180
  when: >
    not _docker_binary['stat']['exists']
